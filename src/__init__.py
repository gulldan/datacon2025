"""COX-2 Dataset Preparation Package.

–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö, –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
–¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤ COX-2.
"""

import warnings
from pathlib import Path

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore")

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
# –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
from .classical_models import ClassicalModels
from .cross_validation import CrossValidation
from .data_preparation import prepare_data_pipeline
from .logging_config import get_logger

# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
from .molecular_augmentation import (
    MolecularAugmentation,
    augment_molecular_data,
    augment_molecular_data_optimized,
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
MODERN_MODELS_AVAILABLE = False
try:
    from .improved_modern_models import (
        OptimizedMLPBaseline,
        OptimizedSimpleGAT,
        OptimizedSimpleGCN,
        create_molecular_graph_fast,
        prepare_graph_data_optimized,
        train_model_optimized,
    )

    MODERN_MODELS_AVAILABLE = True
    logger = get_logger(__name__)
    logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")

except ImportError as e:
    logger = get_logger(__name__)
    logger.warning(f"‚ö†Ô∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    logger.warning("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ torch-geometric –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    OptimizedMLPBaseline = None
    OptimizedSimpleGAT = None
    OptimizedSimpleGCN = None
    create_molecular_graph_fast = None
    prepare_graph_data_optimized = None
    train_model_optimized = None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–æ–≤—ã—Ö —É—Ç–∏–ª–∏—Ç
GRAPH_UTILS_AVAILABLE = False
try:
    from .graph_utils import prepare_graph_data
    GRAPH_UTILS_AVAILABLE = True
    logger.info("‚úÖ –ì—Ä–∞—Ñ–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è –ì—Ä–∞—Ñ–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    prepare_graph_data = None

# –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞
__version__ = "1.2.0"

# –ì–ª–∞–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å—ã
__all__ = [
    # –í–µ—Ä—Å–∏—è
    "__version__",

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    "get_logger",

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    "prepare_data_pipeline",

    # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
    "ClassicalModels",
    "CrossValidation",

    # –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    "MolecularAugmentation",
    "augment_molecular_data",
    "augment_molecular_data_optimized",

    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    "OptimizedMLPBaseline",
    "OptimizedSimpleGAT",
    "OptimizedSimpleGCN",
    "create_molecular_graph_fast",
    "prepare_graph_data_optimized",
    "train_model_optimized",

    # –ì—Ä–∞—Ñ–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    "prepare_graph_data",

    # –§–ª–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    "MODERN_MODELS_AVAILABLE",
    "GRAPH_UTILS_AVAILABLE",
]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    logger = get_logger(__name__)

    dependencies = {
        "polars": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
        "scikit-learn": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
        "rdkit": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
        "torch": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
        "numpy": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
        "pandas": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
        "torch-geometric": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if MODERN_MODELS_AVAILABLE else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "tqdm": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
        "plotly": "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω",
    }

    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    for dep, status in dependencies.items():
        logger.info(f"  {dep}: {status}")

    return dependencies


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if __name__ != "__main__":
    logger = get_logger(__name__)
    logger.info(f"üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞ COX-2 Dataset Preparation v{__version__}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
    if MODERN_MODELS_AVAILABLE:
        logger.info("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        logger.warning("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ torch-geometric")

    if GRAPH_UTILS_AVAILABLE:
        logger.info("üìä –ì—Ä–∞—Ñ–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

    logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
